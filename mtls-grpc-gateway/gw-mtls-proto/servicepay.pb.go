// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: servicepay.proto

package servicepay

import (
	context "context"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Register struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName    string `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`       //Логин магазина, полученный при подключении
	Password    string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`       //Пароль магазина, полученный при подключении
	Token       string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`             //Или открытый ключ для аутентификации, вместо логин-пароль. Обязательно
	OrderNumber string `protobuf:"bytes,4,opt,name=orderNumber,proto3" json:"orderNumber,omitempty"` //Номер (идентификатор) заказа в системе магазина
	Amount      string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`           //Сумма платежа в минимальных единицах валюты. Обязательно
	ReturnUrl   string `protobuf:"bytes,6,opt,name=returnUrl,proto3" json:"returnUrl,omitempty"`     //Адрес перенаправления пользователя в случае успешной оплаты. Обязательно
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"` //Описание заказа в свободной форме
}

func (x *Register) Reset() {
	*x = Register{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicepay_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Register) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Register) ProtoMessage() {}

func (x *Register) ProtoReflect() protoreflect.Message {
	mi := &file_servicepay_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Register.ProtoReflect.Descriptor instead.
func (*Register) Descriptor() ([]byte, []int) {
	return file_servicepay_proto_rawDescGZIP(), []int{0}
}

func (x *Register) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Register) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Register) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Register) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *Register) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Register) GetReturnUrl() string {
	if x != nil {
		return x.ReturnUrl
	}
	return ""
}

func (x *Register) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName    string `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`       //Логин магазина, полученный при подключении
	Password    string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`       //Пароль магазина, полученный при подключении
	Token       string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`             //Или открытый ключ для аутентификации, вместо логин-пароль
	OrderId     string `protobuf:"bytes,4,opt,name=orderId,proto3" json:"orderId,omitempty"`         //Номер заказа в платежной системе. Обязательно или orderNumber
	OrderNumber string `protobuf:"bytes,5,opt,name=orderNumber,proto3" json:"orderNumber,omitempty"` //Номер (идентификатор) заказа в системе магазина
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicepay_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_servicepay_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_servicepay_proto_rawDescGZIP(), []int{1}
}

func (x *Status) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Status) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Status) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Status) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *Status) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

var File_servicepay_proto protoreflect.FileDescriptor

var file_servicepay_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x61, 0x79, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd2, 0x01, 0x0a,
	0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x55, 0x72, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x92, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x32, 0xae, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x70, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x61, 0x79, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x7d, 0x12, 0x61, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x12,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22, 0x0a, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x3b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x61, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_servicepay_proto_rawDescOnce sync.Once
	file_servicepay_proto_rawDescData = file_servicepay_proto_rawDesc
)

func file_servicepay_proto_rawDescGZIP() []byte {
	file_servicepay_proto_rawDescOnce.Do(func() {
		file_servicepay_proto_rawDescData = protoimpl.X.CompressGZIP(file_servicepay_proto_rawDescData)
	})
	return file_servicepay_proto_rawDescData
}

var file_servicepay_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_servicepay_proto_goTypes = []interface{}{
	(*Register)(nil),             // 0: servicepay.Register
	(*Status)(nil),               // 1: servicepay.Status
	(*wrappers.StringValue)(nil), // 2: google.protobuf.StringValue
}
var file_servicepay_proto_depIdxs = []int32{
	0, // 0: servicepay.RestRequests.AddRegister:input_type -> servicepay.Register
	2, // 1: servicepay.RestRequests.GetRegister:input_type -> google.protobuf.StringValue
	1, // 2: servicepay.RestRequests.GetOrderStatusExtended:input_type -> servicepay.Status
	2, // 3: servicepay.RestRequests.AddRegister:output_type -> google.protobuf.StringValue
	0, // 4: servicepay.RestRequests.GetRegister:output_type -> servicepay.Register
	2, // 5: servicepay.RestRequests.GetOrderStatusExtended:output_type -> google.protobuf.StringValue
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_servicepay_proto_init() }
func file_servicepay_proto_init() {
	if File_servicepay_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_servicepay_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Register); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicepay_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_servicepay_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_servicepay_proto_goTypes,
		DependencyIndexes: file_servicepay_proto_depIdxs,
		MessageInfos:      file_servicepay_proto_msgTypes,
	}.Build()
	File_servicepay_proto = out.File
	file_servicepay_proto_rawDesc = nil
	file_servicepay_proto_goTypes = nil
	file_servicepay_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RestRequestsClient is the client API for RestRequests service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RestRequestsClient interface {
	// sberpay methodes
	AddRegister(ctx context.Context, in *Register, opts ...grpc.CallOption) (*wrappers.StringValue, error)
	GetRegister(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*Register, error)
	GetOrderStatusExtended(ctx context.Context, in *Status, opts ...grpc.CallOption) (*wrappers.StringValue, error)
}

type restRequestsClient struct {
	cc grpc.ClientConnInterface
}

func NewRestRequestsClient(cc grpc.ClientConnInterface) RestRequestsClient {
	return &restRequestsClient{cc}
}

func (c *restRequestsClient) AddRegister(ctx context.Context, in *Register, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, "/servicepay.RestRequests/AddRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restRequestsClient) GetRegister(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*Register, error) {
	out := new(Register)
	err := c.cc.Invoke(ctx, "/servicepay.RestRequests/GetRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restRequestsClient) GetOrderStatusExtended(ctx context.Context, in *Status, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, "/servicepay.RestRequests/GetOrderStatusExtended", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestRequestsServer is the server API for RestRequests service.
type RestRequestsServer interface {
	// sberpay methodes
	AddRegister(context.Context, *Register) (*wrappers.StringValue, error)
	GetRegister(context.Context, *wrappers.StringValue) (*Register, error)
	GetOrderStatusExtended(context.Context, *Status) (*wrappers.StringValue, error)
}

// UnimplementedRestRequestsServer can be embedded to have forward compatible implementations.
type UnimplementedRestRequestsServer struct {
}

func (*UnimplementedRestRequestsServer) AddRegister(context.Context, *Register) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRegister not implemented")
}
func (*UnimplementedRestRequestsServer) GetRegister(context.Context, *wrappers.StringValue) (*Register, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegister not implemented")
}
func (*UnimplementedRestRequestsServer) GetOrderStatusExtended(context.Context, *Status) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderStatusExtended not implemented")
}

func RegisterRestRequestsServer(s *grpc.Server, srv RestRequestsServer) {
	s.RegisterService(&_RestRequests_serviceDesc, srv)
}

func _RestRequests_AddRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Register)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestRequestsServer).AddRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicepay.RestRequests/AddRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestRequestsServer).AddRegister(ctx, req.(*Register))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestRequests_GetRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestRequestsServer).GetRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicepay.RestRequests/GetRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestRequestsServer).GetRegister(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestRequests_GetOrderStatusExtended_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Status)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestRequestsServer).GetOrderStatusExtended(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicepay.RestRequests/GetOrderStatusExtended",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestRequestsServer).GetOrderStatusExtended(ctx, req.(*Status))
	}
	return interceptor(ctx, in, info, handler)
}

var _RestRequests_serviceDesc = grpc.ServiceDesc{
	ServiceName: "servicepay.RestRequests",
	HandlerType: (*RestRequestsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRegister",
			Handler:    _RestRequests_AddRegister_Handler,
		},
		{
			MethodName: "GetRegister",
			Handler:    _RestRequests_GetRegister_Handler,
		},
		{
			MethodName: "GetOrderStatusExtended",
			Handler:    _RestRequests_GetOrderStatusExtended_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "servicepay.proto",
}
